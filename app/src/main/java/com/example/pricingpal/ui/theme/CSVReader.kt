package com.example.pricingpal.ui.theme

import androidx.appcompat.app.AppCompatActivity
import androidx.compose.runtime.Composable
import com.example.pricingpal.model.Item
import java.io.FileNotFoundException
import java.io.IOException
import java.io.InputStream
import java.io.InputStreamReader
import java.util.Scanner

/**
 * Class: CSVReader
 * @author Julian Ellis
 * @version 2.0
 * @written 9/24/2023
 * This class extends AppCompatActivity and holds a function to read a CSV file
 *   from an assets folder.
 *
 */
class CSVReader: AppCompatActivity() {

    //Initialize scanner to read file and itemList to hold Item objects
    private var n: Scanner? = null
    private val itemList = ArrayList<Item>()

    /**
     * readFile
     * This function reads a csv file into an ArrayList of Item objects. This
     *  is a composable function.
     * @param fileName The name of the file to be read
     * @return itemList The list of Item objects generated by the function
     */
    @Composable
    fun readFile(fileName: String): List<Item> {
        //Uncomment this line to use hard coded value for file name
        //val fileName = "testdata.csv"

        try {
            //Point the input stream at the assets folder and open the file
            val inputStream: InputStream = assets.open(fileName)
            n = Scanner(InputStreamReader(inputStream))
            //Skip the first line if column headers are present, otherwise comment out
            //NOTE: testdata.csv has no column headers
            val skipColumnHeader = n!!.nextLine()
            //Read file and put into Item objects list
            while (n!!.hasNext()) {
                val line = n!!.nextLine()
                val row = line.split(",")
                //This error should resolve itself when updated item class is added
                val item = Item(row[0], row[1], row[2].toDouble())
                itemList.add(item)
            }
        } catch (e: FileNotFoundException) {
            e.printStackTrace()
        } catch (e: IOException) {
            e.printStackTrace()
        } finally {
            n?.close()
        }
            return itemList
    }
}

